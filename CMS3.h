// -*- C++ -*-
#ifndef CMS3_H
#define CMS3_H
#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector>
#include <unistd.h>
typedef ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > LorentzVector;

// Generated with file: ../ntuple_ttbar.root

using namespace std;
class CMS3 {
private:
protected:
  unsigned int index;
  vector<int> pfjets_partonFlavour_;
  TBranch *pfjets_partonFlavour_branch;
  bool pfjets_partonFlavour_isLoaded;
  vector<float> pfjets_chargedEmE_;
  TBranch *pfjets_chargedEmE_branch;
  bool pfjets_chargedEmE_isLoaded;
  float evt_pfmet_TauEnDown_;
  TBranch *evt_pfmet_TauEnDown_branch;
  bool evt_pfmet_TauEnDown_isLoaded;
  int evt_bunchCrossing_;
  TBranch *evt_bunchCrossing_branch;
  bool evt_bunchCrossing_isLoaded;
  vector<float> pfjets_neutralHadronE_;
  TBranch *pfjets_neutralHadronE_branch;
  bool pfjets_neutralHadronE_isLoaded;
  float evt_pfmetPhi_JetResUp_;
  TBranch *evt_pfmetPhi_JetResUp_branch;
  bool evt_pfmetPhi_JetResUp_isLoaded;
  unsigned int evt_detectorStatus_;
  TBranch *evt_detectorStatus_branch;
  bool evt_detectorStatus_isLoaded;
  vector<float> pfjets_undoJEC_;
  TBranch *pfjets_undoJEC_branch;
  bool pfjets_undoJEC_isLoaded;
  float evt_pfmetPhi_ElectronEnDown_;
  TBranch *evt_pfmetPhi_ElectronEnDown_branch;
  bool evt_pfmetPhi_ElectronEnDown_isLoaded;
  float evt_pfmet_MuonEnDown_;
  TBranch *evt_pfmet_MuonEnDown_branch;
  bool evt_pfmet_MuonEnDown_isLoaded;
  float evt_pfmetPhi_UnclusteredEnUp_;
  TBranch *evt_pfmetPhi_UnclusteredEnUp_branch;
  bool evt_pfmetPhi_UnclusteredEnUp_isLoaded;
  int evt_experimentType_;
  TBranch *evt_experimentType_branch;
  bool evt_experimentType_isLoaded;
  vector<vector<bool> > pfjets_pfcandshighPurity_;
  TBranch *pfjets_pfcandshighPurity_branch;
  bool pfjets_pfcandshighPurity_isLoaded;
  vector<int> pfjets_hadronFlavour_;
  TBranch *pfjets_hadronFlavour_branch;
  bool pfjets_hadronFlavour_isLoaded;
  unsigned int evt_lumiBlock_;
  TBranch *evt_lumiBlock_branch;
  bool evt_lumiBlock_isLoaded;
  float evt_pfmet_JetEnDown_;
  TBranch *evt_pfmet_JetEnDown_branch;
  bool evt_pfmet_JetEnDown_isLoaded;
  float evt_pfmet_TauEnUp_;
  TBranch *evt_pfmet_TauEnUp_branch;
  bool evt_pfmet_TauEnUp_isLoaded;
  float evt_pfmet_JetResDown_;
  TBranch *evt_pfmet_JetResDown_branch;
  bool evt_pfmet_JetResDown_isLoaded;
  float evt_pfmetPhi_PhotonEnDown_;
  TBranch *evt_pfmetPhi_PhotonEnDown_branch;
  bool evt_pfmetPhi_PhotonEnDown_isLoaded;
  vector<float> pfjets_pileupJetId_;
  TBranch *pfjets_pileupJetId_branch;
  bool pfjets_pileupJetId_isLoaded;
  vector<float> pfjets_chargedHadronE_;
  TBranch *pfjets_chargedHadronE_branch;
  bool pfjets_chargedHadronE_isLoaded;
  float evt_calomet_;
  TBranch *evt_calomet_branch;
  bool evt_calomet_isLoaded;
  float evt_instantLumi_;
  TBranch *evt_instantLumi_branch;
  bool evt_instantLumi_isLoaded;
  float evt_pfmetPhi_raw_;
  TBranch *evt_pfmetPhi_raw_branch;
  bool evt_pfmetPhi_raw_isLoaded;
  float evt_lumiRun_;
  TBranch *evt_lumiRun_branch;
  bool evt_lumiRun_isLoaded;
  float evt_pfmetPhi_JetResDown_;
  TBranch *evt_pfmetPhi_JetResDown_branch;
  bool evt_pfmetPhi_JetResDown_isLoaded;
  vector<float> pfjets_neutralEmE_;
  TBranch *pfjets_neutralEmE_branch;
  bool pfjets_neutralEmE_isLoaded;
  float evt_pfsumet_raw_;
  TBranch *evt_pfsumet_raw_branch;
  bool evt_pfsumet_raw_isLoaded;
  float evt_pfmetPhi_MuonEnUp_;
  TBranch *evt_pfmetPhi_MuonEnUp_branch;
  bool evt_pfmetPhi_MuonEnUp_isLoaded;
  vector<bool> pfjets_matched_;
  TBranch *pfjets_matched_branch;
  bool pfjets_matched_isLoaded;
  vector<vector<float> > pfjets_pfcandsdxy_;
  TBranch *pfjets_pfcandsdxy_branch;
  bool pfjets_pfcandsdxy_isLoaded;
  float gen_metPhi_;
  TBranch *gen_metPhi_branch;
  bool gen_metPhi_isLoaded;
  float evt_pfmetSig_;
  TBranch *evt_pfmetSig_branch;
  bool evt_pfmetSig_isLoaded;
  float evt_pileup_;
  TBranch *evt_pileup_branch;
  bool evt_pileup_isLoaded;
  int evt_orbitNumber_;
  TBranch *evt_orbitNumber_branch;
  bool evt_orbitNumber_isLoaded;
  vector<TString> evt_CMS3tag_;
  TBranch *evt_CMS3tag_branch;
  bool evt_CMS3tag_isLoaded;
  float evt_pfmetPhi_TauEnDown_;
  TBranch *evt_pfmetPhi_TauEnDown_branch;
  bool evt_pfmetPhi_TauEnDown_isLoaded;
  vector<vector<float> > pfjets_pfcandsdxyError_;
  TBranch *pfjets_pfcandsdxyError_branch;
  bool pfjets_pfcandsdxyError_isLoaded;
  int evt_isRealData_;
  TBranch *evt_isRealData_branch;
  bool evt_isRealData_isLoaded;
  vector<int> genps_status_;
  TBranch *genps_status_branch;
  bool genps_status_isLoaded;
  vector<int> genps_id_;
  TBranch *genps_id_branch;
  bool genps_id_isLoaded;
  float gen_met_;
  TBranch *gen_met_branch;
  bool gen_met_isLoaded;
  float evt_calometPhi_;
  TBranch *evt_calometPhi_branch;
  bool evt_calometPhi_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > pfjets_p4_;
  TBranch *pfjets_p4_branch;
  bool pfjets_p4_isLoaded;
  vector<float> pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_;
  TBranch *pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_branch;
  bool pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag_isLoaded;
  float evt_pfmetPhi_;
  TBranch *evt_pfmetPhi_branch;
  bool evt_pfmetPhi_isLoaded;
  float evt_bField_;
  TBranch *evt_bField_branch;
  bool evt_bField_isLoaded;
  vector<vector<int> > pfjets_pfcandsid_;
  TBranch *pfjets_pfcandsid_branch;
  bool pfjets_pfcandsid_isLoaded;
  ULong64_t evt_event_;
  TBranch *evt_event_branch;
  bool evt_event_isLoaded;
  vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > genps_p4_;
  TBranch *genps_p4_branch;
  bool genps_p4_isLoaded;
  int evt_storeNumber_;
  TBranch *evt_storeNumber_branch;
  bool evt_storeNumber_isLoaded;
  float evt_pfmetPhi_MuonEnDown_;
  TBranch *evt_pfmetPhi_MuonEnDown_branch;
  bool evt_pfmetPhi_MuonEnDown_isLoaded;
  float evt_pfmet_PhotonEnDown_;
  TBranch *evt_pfmet_PhotonEnDown_branch;
  bool evt_pfmet_PhotonEnDown_isLoaded;
  float evt_pfmetPhi_UnclusteredEnDown_;
  TBranch *evt_pfmetPhi_UnclusteredEnDown_branch;
  bool evt_pfmetPhi_UnclusteredEnDown_isLoaded;
  float evt_pfmet_PhotonEnUp_;
  TBranch *evt_pfmet_PhotonEnUp_branch;
  bool evt_pfmet_PhotonEnUp_isLoaded;
  float evt_pfmetPhi_JetEnDown_;
  TBranch *evt_pfmetPhi_JetEnDown_branch;
  bool evt_pfmetPhi_JetEnDown_isLoaded;
  float evt_pfmet_ElectronEnDown_;
  TBranch *evt_pfmet_ElectronEnDown_branch;
  bool evt_pfmet_ElectronEnDown_isLoaded;
  float evt_pfmetPhi_TauEnUp_;
  TBranch *evt_pfmetPhi_TauEnUp_branch;
  bool evt_pfmetPhi_TauEnUp_isLoaded;
  vector<int> pfjets_type_;
  TBranch *pfjets_type_branch;
  bool pfjets_type_isLoaded;
  float evt_instantLumiErr_;
  TBranch *evt_instantLumiErr_branch;
  bool evt_instantLumiErr_isLoaded;
  float evt_pfmetSignificance_;
  TBranch *evt_pfmetSignificance_branch;
  bool evt_pfmetSignificance_isLoaded;
  vector<float> pfjets_photonE_;
  TBranch *pfjets_photonE_branch;
  bool pfjets_photonE_isLoaded;
  vector<float> pfjets_area_;
  TBranch *pfjets_area_branch;
  bool pfjets_area_isLoaded;
  float evt_pfmetPhi_PhotonEnUp_;
  TBranch *evt_pfmetPhi_PhotonEnUp_branch;
  bool evt_pfmetPhi_PhotonEnUp_isLoaded;
  float evt_pfmet_ElectronEnUp_;
  TBranch *evt_pfmet_ElectronEnUp_branch;
  bool evt_pfmet_ElectronEnUp_isLoaded;
  float evt_pfmet_raw_;
  TBranch *evt_pfmet_raw_branch;
  bool evt_pfmet_raw_isLoaded;
  float evt_pfmet_;
  TBranch *evt_pfmet_branch;
  bool evt_pfmet_isLoaded;
  float evt_pfmetPhi_ElectronEnUp_;
  TBranch *evt_pfmetPhi_ElectronEnUp_branch;
  bool evt_pfmetPhi_ElectronEnUp_isLoaded;
  float evt_pfmet_JetResUp_;
  TBranch *evt_pfmet_JetResUp_branch;
  bool evt_pfmet_JetResUp_isLoaded;
  vector<vector<float> > pfjets_pfcandsdz_;
  TBranch *pfjets_pfcandsdz_branch;
  bool pfjets_pfcandsdz_isLoaded;
  float evt_pfmet_MuonEnUp_;
  TBranch *evt_pfmet_MuonEnUp_branch;
  bool evt_pfmet_MuonEnUp_isLoaded;
  vector<ULong64_t> evt_timestamp_;
  TBranch *evt_timestamp_branch;
  bool evt_timestamp_isLoaded;
  vector<vector<float> > pfjets_pfcandsdzError_;
  TBranch *pfjets_pfcandsdzError_branch;
  bool pfjets_pfcandsdzError_isLoaded;
  float evt_pfmet_UnclusteredEnUp_;
  TBranch *evt_pfmet_UnclusteredEnUp_branch;
  bool evt_pfmet_UnclusteredEnUp_isLoaded;
  float evt_lumiFill_;
  TBranch *evt_lumiFill_branch;
  bool evt_lumiFill_isLoaded;
  unsigned int evt_run_;
  TBranch *evt_run_branch;
  bool evt_run_isLoaded;
  vector<int> genps_id_mother_;
  TBranch *genps_id_mother_branch;
  bool genps_id_mother_isLoaded;
  float evt_pileupRMS_;
  TBranch *evt_pileupRMS_branch;
  bool evt_pileupRMS_isLoaded;
  vector<TString> evt_dataset_;
  TBranch *evt_dataset_branch;
  bool evt_dataset_isLoaded;
  float evt_pfmet_UnclusteredEnDown_;
  TBranch *evt_pfmet_UnclusteredEnDown_branch;
  bool evt_pfmet_UnclusteredEnDown_isLoaded;
  vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > pfjets_pfcandsp4_;
  TBranch *pfjets_pfcandsp4_branch;
  bool pfjets_pfcandsp4_isLoaded;
  vector<float> pfjets_electronE_;
  TBranch *pfjets_electronE_branch;
  bool pfjets_electronE_isLoaded;
  vector<float> pfjets_muonE_;
  TBranch *pfjets_muonE_branch;
  bool pfjets_muonE_isLoaded;
  float evt_pfsumet_;
  TBranch *evt_pfsumet_branch;
  bool evt_pfsumet_isLoaded;
  float evt_pfmetPhi_JetEnUp_;
  TBranch *evt_pfmetPhi_JetEnUp_branch;
  bool evt_pfmetPhi_JetEnUp_isLoaded;
  float evt_pfmet_JetEnUp_;
  TBranch *evt_pfmet_JetEnUp_branch;
  bool evt_pfmet_JetEnUp_isLoaded;
public:
  void Init(TTree *tree);
  void GetEntry(unsigned int idx);
  void LoadAllBranches();
  const vector<int> &pfjets_partonFlavour();
  const vector<float> &pfjets_chargedEmE();
  const float &evt_pfmet_TauEnDown();
  const int &evt_bunchCrossing();
  const vector<float> &pfjets_neutralHadronE();
  const float &evt_pfmetPhi_JetResUp();
  const unsigned int &evt_detectorStatus();
  const vector<float> &pfjets_undoJEC();
  const float &evt_pfmetPhi_ElectronEnDown();
  const float &evt_pfmet_MuonEnDown();
  const float &evt_pfmetPhi_UnclusteredEnUp();
  const int &evt_experimentType();
  const vector<vector<bool> > &pfjets_pfcandshighPurity();
  const vector<int> &pfjets_hadronFlavour();
  const unsigned int &evt_lumiBlock();
  const float &evt_pfmet_JetEnDown();
  const float &evt_pfmet_TauEnUp();
  const float &evt_pfmet_JetResDown();
  const float &evt_pfmetPhi_PhotonEnDown();
  const vector<float> &pfjets_pileupJetId();
  const vector<float> &pfjets_chargedHadronE();
  const float &evt_calomet();
  const float &evt_instantLumi();
  const float &evt_pfmetPhi_raw();
  const float &evt_lumiRun();
  const float &evt_pfmetPhi_JetResDown();
  const vector<float> &pfjets_neutralEmE();
  const float &evt_pfsumet_raw();
  const float &evt_pfmetPhi_MuonEnUp();
  const vector<bool> &pfjets_matched();
  const vector<vector<float> > &pfjets_pfcandsdxy();
  const float &gen_metPhi();
  const float &evt_pfmetSig();
  const float &evt_pileup();
  const int &evt_orbitNumber();
  const vector<TString> &evt_CMS3tag();
  const float &evt_pfmetPhi_TauEnDown();
  const vector<vector<float> > &pfjets_pfcandsdxyError();
  const int &evt_isRealData();
  const vector<int> &genps_status();
  const vector<int> &genps_id();
  const float &gen_met();
  const float &evt_calometPhi();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_p4();
  const vector<float> &pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag();
  const float &evt_pfmetPhi();
  const float &evt_bField();
  const vector<vector<int> > &pfjets_pfcandsid();
  const ULong64_t &evt_event();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
  const int &evt_storeNumber();
  const float &evt_pfmetPhi_MuonEnDown();
  const float &evt_pfmet_PhotonEnDown();
  const float &evt_pfmetPhi_UnclusteredEnDown();
  const float &evt_pfmet_PhotonEnUp();
  const float &evt_pfmetPhi_JetEnDown();
  const float &evt_pfmet_ElectronEnDown();
  const float &evt_pfmetPhi_TauEnUp();
  const vector<int> &pfjets_type();
  const float &evt_instantLumiErr();
  const float &evt_pfmetSignificance();
  const vector<float> &pfjets_photonE();
  const vector<float> &pfjets_area();
  const float &evt_pfmetPhi_PhotonEnUp();
  const float &evt_pfmet_ElectronEnUp();
  const float &evt_pfmet_raw();
  const float &evt_pfmet();
  const float &evt_pfmetPhi_ElectronEnUp();
  const float &evt_pfmet_JetResUp();
  const vector<vector<float> > &pfjets_pfcandsdz();
  const float &evt_pfmet_MuonEnUp();
  const vector<ULong64_t> &evt_timestamp();
  const vector<vector<float> > &pfjets_pfcandsdzError();
  const float &evt_pfmet_UnclusteredEnUp();
  const float &evt_lumiFill();
  const unsigned int &evt_run();
  const vector<int> &genps_id_mother();
  const float &evt_pileupRMS();
  const vector<TString> &evt_dataset();
  const float &evt_pfmet_UnclusteredEnDown();
  const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &pfjets_pfcandsp4();
  const vector<float> &pfjets_electronE();
  const vector<float> &pfjets_muonE();
  const float &evt_pfsumet();
  const float &evt_pfmetPhi_JetEnUp();
  const float &evt_pfmet_JetEnUp();
  static void progress( int nEventsTotal, int nEventsChain );
};

#ifndef __CINT__
extern CMS3 cms3;
#endif

namespace tas {

  const vector<int> &pfjets_partonFlavour();
  const vector<float> &pfjets_chargedEmE();
  const float &evt_pfmet_TauEnDown();
  const int &evt_bunchCrossing();
  const vector<float> &pfjets_neutralHadronE();
  const float &evt_pfmetPhi_JetResUp();
  const unsigned int &evt_detectorStatus();
  const vector<float> &pfjets_undoJEC();
  const float &evt_pfmetPhi_ElectronEnDown();
  const float &evt_pfmet_MuonEnDown();
  const float &evt_pfmetPhi_UnclusteredEnUp();
  const int &evt_experimentType();
  const vector<vector<bool> > &pfjets_pfcandshighPurity();
  const vector<int> &pfjets_hadronFlavour();
  const unsigned int &evt_lumiBlock();
  const float &evt_pfmet_JetEnDown();
  const float &evt_pfmet_TauEnUp();
  const float &evt_pfmet_JetResDown();
  const float &evt_pfmetPhi_PhotonEnDown();
  const vector<float> &pfjets_pileupJetId();
  const vector<float> &pfjets_chargedHadronE();
  const float &evt_calomet();
  const float &evt_instantLumi();
  const float &evt_pfmetPhi_raw();
  const float &evt_lumiRun();
  const float &evt_pfmetPhi_JetResDown();
  const vector<float> &pfjets_neutralEmE();
  const float &evt_pfsumet_raw();
  const float &evt_pfmetPhi_MuonEnUp();
  const vector<bool> &pfjets_matched();
  const vector<vector<float> > &pfjets_pfcandsdxy();
  const float &gen_metPhi();
  const float &evt_pfmetSig();
  const float &evt_pileup();
  const int &evt_orbitNumber();
  const vector<TString> &evt_CMS3tag();
  const float &evt_pfmetPhi_TauEnDown();
  const vector<vector<float> > &pfjets_pfcandsdxyError();
  const int &evt_isRealData();
  const vector<int> &genps_status();
  const vector<int> &genps_id();
  const float &gen_met();
  const float &evt_calometPhi();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &pfjets_p4();
  const vector<float> &pfjets_pfCombinedInclusiveSecondaryVertexV2BJetTag();
  const float &evt_pfmetPhi();
  const float &evt_bField();
  const vector<vector<int> > &pfjets_pfcandsid();
  const ULong64_t &evt_event();
  const vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > &genps_p4();
  const int &evt_storeNumber();
  const float &evt_pfmetPhi_MuonEnDown();
  const float &evt_pfmet_PhotonEnDown();
  const float &evt_pfmetPhi_UnclusteredEnDown();
  const float &evt_pfmet_PhotonEnUp();
  const float &evt_pfmetPhi_JetEnDown();
  const float &evt_pfmet_ElectronEnDown();
  const float &evt_pfmetPhi_TauEnUp();
  const vector<int> &pfjets_type();
  const float &evt_instantLumiErr();
  const float &evt_pfmetSignificance();
  const vector<float> &pfjets_photonE();
  const vector<float> &pfjets_area();
  const float &evt_pfmetPhi_PhotonEnUp();
  const float &evt_pfmet_ElectronEnUp();
  const float &evt_pfmet_raw();
  const float &evt_pfmet();
  const float &evt_pfmetPhi_ElectronEnUp();
  const float &evt_pfmet_JetResUp();
  const vector<vector<float> > &pfjets_pfcandsdz();
  const float &evt_pfmet_MuonEnUp();
  const vector<ULong64_t> &evt_timestamp();
  const vector<vector<float> > &pfjets_pfcandsdzError();
  const float &evt_pfmet_UnclusteredEnUp();
  const float &evt_lumiFill();
  const unsigned int &evt_run();
  const vector<int> &genps_id_mother();
  const float &evt_pileupRMS();
  const vector<TString> &evt_dataset();
  const float &evt_pfmet_UnclusteredEnDown();
  const vector<vector<ROOT::Math::LorentzVector<ROOT::Math::PxPyPzE4D<float> > > > &pfjets_pfcandsp4();
  const vector<float> &pfjets_electronE();
  const vector<float> &pfjets_muonE();
  const float &evt_pfsumet();
  const float &evt_pfmetPhi_JetEnUp();
  const float &evt_pfmet_JetEnUp();
}
#endif
